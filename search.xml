<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo建站全攻略</title>
    <url>/2022/11/06/Hexo%E5%BB%BA%E7%AB%99%E5%85%A8%E6%94%BB%E7%95%A5/</url>
    <content><![CDATA[<p>一、Hexo简介<br>Hexo 是一个快速、简洁且高效的博客框架，使用 Markdown解析文章，在几秒内，即可利用靓丽的主题生成静态网页。<br><span id="more"></span><br>二、搭建流程（Linux）<br>1、准备工作<br>安装node.js<br>下载地址：<a href="https://nodejs.org/en">https://nodejs.org/en</a><br>推荐下载LTS版，默认安装即可</p>
<p>2、安装hexo<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure></p>
<p>3、初始化hexo文件夹<br>（1）、创建文件夹<br>所有的建站文件都会存储在一个文件夹中，所以挑选一个位置，创建一个文件夹，路径和文件夹名字最好是英文。<br>例如我在/home路径下创建myweb文件夹<br>（2）、初始化文件夹<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd /home/myweb</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure>
<p>4、安装依赖包<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></p>
<p>5、本地运行hexo<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure>
<p>完成后在浏览器中打开：<a href="http://localhost:4000">http://localhost:4000</a></p>
<p>打开后如下图所示，此时hexo就运行起来了</p>
<p>6、创建仓库<br>在github上创建博客的仓库，创建仓库地址：<a href="https://github.com/new">https://github.com/new</a><br>例如我的github帐号名为w5l6j9，那么我的Repository的name就必须为文w5l6j9.github.io</p>
<p>7、修改配置文件<br>（1）、修改deploy<br>打开 home\myweb下的_config.yml文件，搜索deploy，修改为如下格式，其中repository就是刚才创建的仓库地址，需要注意的是每个字段后都有冒号，冒号后有一个英文的空格<br>修改如下所示：</p>
<p>deploy:<br>  type: git<br>  repository: <a href="https://github.com/w5l6j9/w5l6j9.github.io.git">https://github.com/w5l6j9/w5l6j9.github.io.git</a><br>  branch: master<br>（2）、修改URL<br>搜索ULR，将url替换成<a href="https://w5l6j9.github.io/">https://w5l6j9.github.io/</a></p>
<p>#URL<br>##If your site is put in a subdirectory, set url as ‘<a href="http://yoursite.com/child">http://yoursite.com/child</a>‘ and root as ‘/child/‘</p>
<p>url: <a href="https://w5l6j9.github.io">https://w5l6j9.github.io</a><br>8、设置SSH keys<br>（1）、生成SHH keys<br>输入下面的命令，查看是否生成过ssh，如果有则将根目录下的.ssh文件夹删除<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ls -al ~/.ssh</span><br></pre></td></tr></table></figure></p>
<p>然后依次输入下面的命令，邮箱为你自己申请github的邮箱<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;example@qq.com&quot;</span><br><span class="line"></span><br><span class="line">ssh-agent -s</span><br><span class="line"></span><br><span class="line">ssh-add ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure></p>
<p>如果出现Could not open a connection to your authentication agent.则依次输入下面的指令<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">eval `ssh-agent -s`</span><br><span class="line"></span><br><span class="line">ssh-add</span><br></pre></td></tr></table></figure></p>
<p>然后输入下面的命令，复制公钥<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">clip &lt; ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure></p>
<p>（2）、设置SSH keys<br>点击github的头像，选择Settings</p>
<p>设置</p>
<p>然后依次点击左侧的SSHand GPG keys和右上角的New SSH key</p>
<p>添加SSH</p>
<p>title可以随意取名，将刚才复制的公钥粘贴到key的文本框中，点击Add SHH key，要求输入密码，输入后即可添加成功。</p>
<p>（3）、测试<br>输入<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure></p>
<p>会出现提示，输入yes，再次按回车，当出现下图所示的文字时，表示测试成功，SSH配置成功！</p>
<p>如果出现remote: Support for password authentication was removed on August 13, 2021. Please use a personal access token instead.</p>
<p>意思就是要用个人令牌连接</p>
<p>具体解决方法看这篇博客<br><a href="https://blog.csdn.net/qq_42714262/article/details/119706383">https://blog.csdn.net/qq_42714262/article/details/119706383</a></p>
<p>最后把config.yml中的地址替换成如下的地址(账号名换成你自己的)<br>  repository: <a href="https://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@github.com/w5l6j9/w5l6j9.github.io">https://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@github.com/w5l6j9/w5l6j9.github.io</a></p>
<p>9、部署到github上<br>输入<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure></p>
<p>然后再输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure>
<p>如果出现以下错误：</p>
<p>ERROR Deployer not found: github<br>就需要安装hexo-deployer-git模块，<br>输入<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p>
<p>安装好之后重新执行<br><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hexo deploy</span><br></pre></td></tr></table></figure></p>
<p>10、访问博客<br>在浏览器打开：<a href="https://w5l6j9.github.io/">https://w5l6j9.github.io/</a> ，即可访问基于hexo的博客了！<br>PS：部署之后可能有延迟，请耐心等待。</p>
<p>11、命令简化<br>hexo的命令可以简写，如下：</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">命令</th>
<th style="text-align:center">简写</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">hexo generate</td>
<td style="text-align:center">hexo g</td>
</tr>
<tr>
<td style="text-align:center">hexo deploy</td>
<td style="text-align:center">hexo d</td>
</tr>
<tr>
<td style="text-align:center">hexo server</td>
<td style="text-align:center">hexo s</td>
</tr>
</tbody>
</table>
</div>
<p>参考:<a href="https://juemuren4449.com/archives/build-hexo-blog-guide">https://juemuren4449.com/archives/build-hexo-blog-guide</a></p>
]]></content>
  </entry>
  <entry>
    <title>java的引用和引用传递</title>
    <url>/2023/01/03/java%E7%9A%84%E5%BC%95%E7%94%A8%E5%92%8C%E5%BC%95%E7%94%A8%E4%BC%A0%E9%80%92/</url>
    <content><![CDATA[<p>什么是引用:引用就是一个内存地址，一般存在内存的栈(stack)空间中。ps:这里指的内存一般都是java内存模型，而非操作系统内存</p>
<p>Java中一共有4种引用方式<br><span id="more"></span><br>1.强引用 2.软引用 3.弱引用 4.虚引用</p>
<p>1.强引用        强引用指向的对象永远不会被垃圾回收器回收，直至内存溢出oom<br>使用场景:String str = new String(“str”);</p>
<p>2.软引用        软引用指向的对象在内存不足时，会被垃圾回收器回收<br>使用场景:创建缓存的时候，创建的对象放进缓存中，当内存不足时，JVM就会回收早先创建的对象。PS：图片编辑器，视频编辑器之类的软件可以使用这种思路。<br>软引用使用例子传送门：<a href="https://www.cnblogs.com/mjorcen/p/3968018.html">https://www.cnblogs.com/mjorcen/p/3968018.html</a></p>
<p>3.弱引用        弱引用指向的对象不管内存不足与否，都会被垃圾回收器回收<br>使用场景:Java源码中的java.util.WeakHashMap中的key就是使用弱引用，我的理解就是，一旦我不需要某个引用，JVM会自动帮我处理它，这样我就不需要做其它操作。<br>弱引用使用例子传送门：<a href="http://www.importnew.com/21206.html">http://www.importnew.com/21206.html</a></p>
<p>4.虚引用        在java8版本之前，只有在虚引用被回收后，虚引用指向的对象才会被垃圾回收器回收；而在java9以及更新的版本中，虚引用回收与否不会对指向的对象造成任何影响<br>使用场景:对象销毁前的一些操作，比如说资源释放等。Object.finalize()虽然也可以做这类动作，但是这个方式即不安全又低效<br>虚引用使用例子传送门：<a href="http://blog.csdn.net/aitangyong/article/details/39450341">http://blog.csdn.net/aitangyong/article/details/39450341</a></p>
<p>一般来说，java中的传递都是都是值传递，即在向一个方法中传递某一个对象的引用后，在方法中的引用都是一个新的拷贝(这个应该是牵扯到深拷贝和浅拷贝的相关的内容)，当对这个引用本身做任何操作，都不会影响到原有引用，但若是对引用指向的对象做操作，如赋予这个引用指向的对象的中的某个属性的值后，这个对象本身会受到影响</p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>一个类的一生</title>
    <url>/2023/01/05/%E4%B8%80%E4%B8%AA%E7%B1%BB%E7%9A%84%E4%B8%80%E7%94%9F/</url>
    <content><![CDATA[<p><img src="https://pic.imgdb.cn/item/63b6cffbbe43e0d30e6b5ec4.jpg" alt></p>
]]></content>
      <tags>
        <tag>java</tag>
      </tags>
  </entry>
  <entry>
    <title>软路由的搭建</title>
    <url>/2023/05/08/%E8%BD%AF%E8%B7%AF%E7%94%B1%E7%9A%84%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<p>背景:之前入手了一个苹果电视盒，一直放在角落吃灰。由于最近搬家了，苹果电视盒总算有用武之地了(搭配索尼4k电视，嘿嘿嘿)，<br>但是苹果电视盒呢，懂的都懂， 需要科学上网的环境才能体验到全部功能。那要在家里搭建一个可以供所有终端(手机，电视，电脑)<br>都能进行科学上网的环境， 一台高可用的软路由必不可少，那今天咱们就来学习一下如何用openwrt系统配置搭建一台软路由。<br><span id="more"></span>                  </p>
<p>原料:1、一台废弃的路由器(可刷openwrt系统，因为我之前买过一个树莓派4b，所以今天利用树莓派4b进行配置搭建)<br>    2、一个可以科学上网的账号(机场地址)<br>    3、一台性能较好的路由器(硬路由)</p>
<p>一、刷openwrt系统至软路由<br>(1)首先，我们需要将openwrt系统刷至软路由上(因为我是利用树莓派作软路由，所以这里下载的是树莓派的固件,下载版本需要带factory的)<br>下载地址: <a href="https://github.com/bigbugcc/OpenWrts">https://github.com/bigbugcc/OpenWrts</a><br>下载好固件后，进行下一步<br>(2)系统盘制作（8GB及以上的TF卡和TF读卡器）<br>SD Card Formatter 软件</p>
<p>（下载地址: <a href="https://www.sdcard.org/downloads/formatter/eula_windows/SDCardFormatterv5_WinEN.zip">https://www.sdcard.org/downloads/formatter/eula_windows/SDCardFormatterv5_WinEN.zip</a> ）</p>
<p>将TF卡插入读卡器接在电脑上，打开SD Card Formatter在Select card中选择插入的SD卡，<br>可在Card information确认卡的信息，如果Select card不显示sd卡信息，刷新即可。<br><img src="https://pic2.imgdb.cn/item/6464db730d2dde5777e7fa3c.webp" alt><br>确认执行格式化（操作该步骤前请确认已备份卡中重要的数据）<br><img src="https://pic2.imgdb.cn/item/6464db730d2dde5777e7fa5a.webp" alt><br>如果不出意外将会提示如下信息<br><img src="https://pic2.imgdb.cn/item/6464db730d2dde5777e7fa78.webp" alt></p>
<p>(3)系统烧录/安装<br>使用 balenaEtacher 将下载好的镜像烧录到sd卡上，软件已开源在Github<br>（下载地址: <a href="https://github.com/balena-io/etcher/releases/download/v1.5.113/balenaEtcher-Portable-1.5.113.exe">https://github.com/balena-io/etcher/releases/download/v1.5.113/balenaEtcher-Portable-1.5.113.exe</a> ）<br>从网络中获取烧录和本地烧录一样，只是网络获取只需将镜像地址填入就可以自己下载并烧录，不需要手动去下载镜像。<br><img src="https://pic2.imgdb.cn/item/6464db730d2dde5777e7fa97.webp" alt><br>我们选择本地已经下载好的树莓派官方镜像<br><img src="https://pic2.imgdb.cn/item/6464db900d2dde5777e819c5.webp" alt><br>接着选择要烧录的盘，这里我们选择刚刚格式化好的16G的SD卡，点击Select，然后等待几分钟<br><img src="https://pic2.imgdb.cn/item/6464db900d2dde5777e819f1.webp" alt><br>烧录成功（如果烧录失败重复几次格式化sd卡即可，如果还是失败那就用DiskGenuines将该盘的所有分区删除即可）<br><img src="https://pic2.imgdb.cn/item/6464db8f0d2dde5777e819aa.webp" alt></p>
<p>参考: <a href="https://www.bilibili.com/read/cv9714518">https://www.bilibili.com/read/cv9714518</a></p>
<p>二、配置系统参数</p>
<p>(1)先配置一个wan口，协议根据你软路由连的上级决定，如果上级是光猫，则选DHCP,如果是路由器，则选PPPOE,然后输入宽带的用户名和密码</p>
<p>(2) 在订阅页面输入订阅地址，手动更新订阅地址，然后选择具体的地址进行应用,保存应用</p>
<p>详见: <a href="https://www.youtube.com/watch?v=Y8IL69uVVbk&amp;t=192s">https://www.youtube.com/watch?v=Y8IL69uVVbk&amp;t=192s</a></p>
<p>三、连接硬路由<br>使用刷好系统的软路由(wan)连接硬路由(lan)，这里关键的一步是要开启硬路由的AP模式，具体的开启方式因为不同的路由器开启方式不同，<br>就不细说了，自行google即可</p>
<p>注意:中文魔改版的openwrt的shadowrocket的广告过滤有很多问题，最好不要开启，不然可能会产生无法保存配置的bug</p>
]]></content>
  </entry>
  <entry>
    <title>面试题汇总</title>
    <url>/2023/01/04/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<p>一、Java基础和高级<br>1.String类为什么是final的。<br>2.HashMap的源码，实现原理，底层结构。<br>3.反射中，Class.forName和classloader的区别<br>4.session和cookie的区别和联系，session的生命周期，多个服务部署时session管理。<br>5.Java中的队列都有哪些，有什么区别。<br>6.Java的内存模型以及GC算法<br>7.Java8的新特性<br>8.Java数组和链表两种结构的操作效率，在哪些情况下(从开头开始，从结尾开始，从中间开始)，哪些操作(插入，查找，删除)的效率高<br>9.Java内存泄露的问题调查定位：jmap、jstack、jconsole、jhat jstack<br><span id="more"></span><br>二、spring框架<br>10.spring框架中需要引用哪些jar包，以及这些jar包的用途<br>11.srpingMVC的原理<br>12.springMVC注解的意思<br>13.spring中beanFactory和ApplicationContext的联系和区别<br>14.spring注入的几种方式<br>15.spring如何实现事务管理<br>16.springIOC和AOP的原理<br>17.spring中循环注入的方式<br>18.Spring AOP与IOC的实现原理<br>19.Spring的beanFactory和factoryBean的区别<br>20.Spring的事务隔离级别，实现原理<br>21.对Spring的理解，非单例注入的原理？它的生命周期？循环注入的原理，aop的实现原理，说说aop中的几个术语，它们是怎么相互工作的？<br>22.spring boot特性，优势，适用场景等</p>
<p>三、java多线程常见问题<br>23.Java创建线程之后，直接调用start()方法和run()的区别<br>24.常用的线程池模式以及不同线程池的使用场景<br>25.newFixedThreadPool此种线程池如果线程数达到最大值后会怎么办，底层原理。<br>26.多线程之间通信的同步问题，synchronized锁的是对象，衍伸出和synchronized相关很多的具体问题，例如同一个类不同方法都有synchronized锁，一个对象是否可以同时访问。或者一个类的static构造方法加上synchronized之后的锁的影响。<br>27.了解可重入锁的含义，以及ReentrantLock 和synchronized的区别<br>28.同步的数据结构，例如concurrentHashMap的源码理解以及内部实现原理，为什么他是同步的且效率高<br>29.atomicinteger和volatile等线程安全操作的关键字的理解和使用<br>30.线程间通信，wait和notify</p>
<p>四、常用命令<br>31.常用的linux下的命令<br>32.大的log文件中，统计异常出现的次数、排序，或者指定输出多少行多少列的内容。<br>33.linux下的调查问题思路：内存、CPU、句柄数、过滤、查找、模拟POST和GET请求等等场景<br>34.shell脚本</p>
<p>五、网络通信<br>35.http是无状态通信，http的请求方式有哪些，可以自己定义新的请求方式么。<br>36.socket通信，以及长连接，分包，连接异常断开的处理。<br>37.socket通信模型的使用，AIO和NIO。<br>38.socket框架netty的使用，以及NIO的实现原理，为什么是异步非阻塞。<br>39.同步和异步，阻塞和非阻塞。</p>
<p>六、设计模式(写代码)<br>40.单例模式：饱汉、饿汉。以及饿汉中的延迟加载<br>41.工厂模式、装饰者模式、观察者模式等</p>
<p>七、数据库MySql<br>42.MySql的存储引擎的不同<br>43.单个索引、联合索引、主键索引<br>44.Mysql怎么分表，以及分表后如果想按条件分页查询怎么办(如果不是按分表字段来查询的话，几乎效率低下，无解)<br>45.分表之后想让一个id多个表是自增的，效率实现<br>46.MySql的主从实时备份同步的配置，以及原理(从库读主库的binlog)，读写分离<br>47.事物的四个特性，以及各自的特点（原子、隔离）等等，项目怎么解决这些问题</p>
<p>八、算法&amp;数据结构&amp;设计模式<br>48.使用随机算法产生一个数，要求把1-1000W之间这些数全部生成。（考察高效率，解决产生冲突的问题）<br>49.两个有序数组的合并排序<br>50.一个数组的倒序<br>51.计算一个正整数的正平方根<br>52.说白了就是常见的那些查找排序算法<br>53.数组和链表数据结构描述，各自的时间复杂度<br>54.二叉树遍历<br>55.快速排序<br>56.BTree相关的操作<br>57.在工作中遇到过哪些设计模式，是如何应用的<br>58.hash算法的有哪几种，优缺点，使用场景<br>59.什么是一致性hash<br>60.paxos算法</p>
<p>九、分布式缓存<br>61.为什么用缓存，用过哪些缓存，redis和memcache的区别<br>62.redis的数据结构<br>63.redis的持久化方式，以及项目中用的哪种，为什么<br>64.redis集群的理解，怎么动态增加或者删除一个节点，而保证数据不丢失。（一致性哈希问题）</p>
<p>线程池、高并发、NIO<br>66.分析线程池的实现原理和线程的调度过程<br>67.线程池如何调优<br>68.线程池的最大线程数目根据什么确定<br>69.动态代理的几种方式<br>70.HashMap的并发问题<br>71.了解LinkedHashMap的应用吗<br>72.反射的原理，反射创建类实例的三种方式是什么？<br>73.cloneable接口实现原理，浅拷贝or深拷贝</p>
<p>Java NIO使用<br>74.hashtable和hashmap的区别及实现原理，hashmap会问到数组索引，hash碰撞怎么解决<br>75.arraylist和linkedlist区别及实现原理<br>76.反射中，Class.forName和ClassLoader区别<br>77.String，Stringbuffer，StringBuilder的区别？<br>78.有没有可能2个不相等的对象有相同的hashcode<br>79.简述NIO的最佳实践，比如netty，mina<br>80.TreeMap的实现原理</p>
<p>JVM相关(面试必考)<br>81.JVM内存分几个区，每个区的作用是什么?<br>82.Java 8的内存分代改进<br>83.JVM垃圾回收机制，何时触发MinorGC等操作<br>84.jvm中一次完整的GC流程（从ygc到fgc）是怎样的，重点讲讲对象如何晋升到老年代，几种主要的jvm参数等<br>85.你知道哪几种垃圾收集器，各自的优缺点，重点讲下cms，g1<br>86.新生代和老生代的内存回收策略<br>87.Eden和Survivor的比例分配等<br>88.深入分析了Classloader，双亲委派机制<br>89.JVM的编译优化<br>90.对Java内存模型的理解，以及其在并发中的应用<br>91.指令重排序，内存栅栏等<br>92.OOM错误，stackoverflow错误，permgen space错误<br>93.JVM常用参数</p>
<p>十、分布式相关<br>94.Dubbo的底层实现原理和机制<br>95.Dubbo 服务负载均衡策略？<br>96.描述一个服务从发布到被消费的详细过程<br>97.分布式系统怎么做服务治理<br>98.接口的幂等性的概念<br>99.消息中间件如何解决消息丢失问题<br>100.Dubbo的服务请求失败怎么处理<br>101.重连机制会不会造成错误<br>102.对分布式事务的理解<br>103.如何实现负载均衡，有哪些算法可以实现？<br>104.Zookeeper的用途，选举的原理是什么？<br>105.数据的垂直拆分水平拆分。<br>106.zookeeper原理和适用场景<br>107.zookeeper watch机制<br>108.redis/zk节点宕机如何处理<br>109.分布式集群下如何做到唯一序列号<br>110.如何做一个分布式锁<br>111.用过哪些MQ，怎么用的，和其他mq比较有什么优缺点，MQ的连接是线程安全的吗<br>112.MQ系统的数据如何保证不丢失<br>113.列举出你能想到的数据库分库分表策略；分库分表后，如何解决全表查询的问题。</p>
<p>十一、数据库<br>114.MySQL InnoDB存储的文件结构<br>115.索引树是如何维护的？<br>116.数据库自增主键可能的问题<br>117.MySQL的几种优化<br>118.mysql索引为什么使用B+树<br>119.数据库锁表的相关处理<br>120.索引失效场景<br>121.高并发下如何做到安全的修改同一行数据，乐观锁和悲观锁是什么，INNODB的行级锁有哪2种，解释其含义<br>122.数据库会死锁吗，举一个死锁的例子，mysql怎么解决死锁</p>
<p>Redis&amp;缓存相关</p>
<p>123.Redis的并发竞争问题如何解决了解Redis事务的CAS操作吗<br>124.缓存机器增删如何对系统影响最小，一致性哈希的实现<br>125.Redis持久化的几种方式，优缺点是什么，怎么实现的<br>126.Redis的缓存失效策略<br>127.缓存穿透的解决办法<br>128.redis集群，高可用，原理<br>129.mySQL里有2000w数据，redis中只存20w的数据，如何保证redis中的数据都是热点数据<br>130.用Redis和任意语言实现一段恶意登录保护的代码，限制1小时内每用户Id最多只能登录5次<br>131.redis的数据淘汰策略</p>
]]></content>
      <tags>
        <tag>面试</tag>
      </tags>
  </entry>
</search>
